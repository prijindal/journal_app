plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.prijindal.journal_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }


    def versionPropsFile = rootProject.file('version.properties')

    def Properties versionProps = new Properties()

    if(versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))

    List<String> runTasks = gradle.startParameter.getTaskNames();
    def value = 0
    for (String item : runTasks)
    if ( item.contains("assembleRelease") || item.contains("bundleRelease")) {
        value = 1;
    }
    def code = Integer.parseInt(versionProps['VERSION_CODE']  ?: "1" ).intValue() + value
    for (String item : runTasks)
    if ( item.contains("assembleRelease") || item.contains("bundleRelease")) {
        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    defaultConfig {
        applicationId = "com.prijindal.journal_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        // minSdk = flutter.minSdkVersion
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = code
        versionName = flutterVersionName + "." + code.toString()
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }

        release {
            signingConfig signingConfigs.release

            for (String item : runTasks)
            if ( item.contains("assembleRelease") || item.contains("bundleRelease")) {
                minifyEnabled true
                shrinkResources true
            }

            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }
}

flutter {
    source = "../.."
}
